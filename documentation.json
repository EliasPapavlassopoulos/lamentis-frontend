{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-3e98b2e4a387f4ebf34dffcf6ab77e7309dbfac2450a1a4b118d611a7b0e5eccd71e848be9fa14cb946f70ca877801cd7e2f1a9f19b98bbaa4e8522cc51ecd98",
            "file": "src/app/core/services/auth.service.ts",
            "properties": [
                {
                    "name": "currentUser$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "getAuthState",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User | null>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "User | null",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserCredential>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserCredential>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Auth, User, user } from '@angular/fire/auth';\nimport {\n    UserCredential,\n    connectAuthEmulator,\n    createUserWithEmailAndPassword,\n    signInWithEmailAndPassword,\n    signOut,\n} from 'firebase/auth';\nimport { Observable, from } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthService {\n    currentUser$: Observable<User | null>;\n\n    constructor(private auth: Auth) {\n        if (!environment.production) {\n            connectAuthEmulator(this.auth, 'http://localhost:9099'); //use the emulator when not in production\n        }\n\n        this.currentUser$ = user(this.auth);\n    }\n\n    register(email: string, password: string): Observable<UserCredential> {\n        return from(createUserWithEmailAndPassword(this.auth, email, password));\n    }\n\n    login(email: string, password: string): Observable<UserCredential> {\n        return from(signInWithEmailAndPassword(this.auth, email, password));\n    }\n\n    logout(): Observable<void> {\n        return from(signOut(this.auth));\n    }\n\n    getCurrentUser(): User | null {\n        return this.auth.currentUser;\n    }\n\n    getAuthState(): Observable<User | null> {\n        return this.currentUser$;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "Auth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "Auth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-a48a71ab6da99af28895276a57a4cb9f1df5b0848c6c1ea09597417607de3d64e6aea541539f425247108825fa4bca73a81e3ef63d3e30a8886caf59e6aba66a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lamentis-root",
            "styleUrls": [],
            "styles": [],
            "template": "<p class=\"text-pretty pt-[20rem] text-center text-[3rem]\">\n    See you soon !\n</p>\n<router-outlet />\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n    selector: 'lamentis-root',\n    standalone: true,\n    imports: [RouterOutlet],\n    template: `\n        <p class=\"text-pretty pt-[20rem] text-center text-[3rem]\">\n            See you soon !\n        </p>\n        <router-outlet />\n    `,\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n    providers: [\n        provideZoneChangeDetection({ eventCoalescing: true }),\n        provideRouter(routes),\n        provideColorThemes(THEMES),\n        provideFirebaseApp(() => initializeApp(environment.firebaseConfig)),\n        provideAuth(() => getAuth()),\n    ],\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: true,\n    firebaseConfig: {\n        apiKey: 'AIzaSyAajuwg7Oo3sbNQxYhgtYkvf1wlBVOGV3M',\n        authDomain: 'lamentis-584565.firebaseapp.com',\n        projectId: 'lamentis-584565',\n        storageBucket: 'lamentis-584565.firebasestorage.app',\n        messagingSenderId: '730338121574',\n        appId: '1:730338121574:web:49eed75009652a5a811aa7',\n    },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: false,\n    firebaseConfig: {\n        apiKey: 'AIzaSyAajuwg7Oo3sbNQxYhgtYkvf1wlBVOGV3M',\n        authDomain: 'lamentis-584565.firebaseapp.com',\n        projectId: 'lamentis-584565',\n        storageBucket: 'lamentis-584565.firebasestorage.app',\n        messagingSenderId: '730338121574',\n        appId: '1:730338121574:web:49eed75009652a5a811aa7',\n    },\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n    providers: [\n        provideZoneChangeDetection({ eventCoalescing: true }),\n        provideRouter(routes),\n        provideColorThemes(THEMES),\n        provideFirebaseApp(() => initializeApp(environment.firebaseConfig)),\n        provideAuth(() => getAuth()),\n    ],\n}"
                }
            ],
            "src/app/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: true,\n    firebaseConfig: {\n        apiKey: 'AIzaSyAajuwg7Oo3sbNQxYhgtYkvf1wlBVOGV3M',\n        authDomain: 'lamentis-584565.firebaseapp.com',\n        projectId: 'lamentis-584565',\n        storageBucket: 'lamentis-584565.firebasestorage.app',\n        messagingSenderId: '730338121574',\n        appId: '1:730338121574:web:49eed75009652a5a811aa7',\n    },\n}"
                }
            ],
            "src/app/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: false,\n    firebaseConfig: {\n        apiKey: 'AIzaSyAajuwg7Oo3sbNQxYhgtYkvf1wlBVOGV3M',\n        authDomain: 'lamentis-584565.firebaseapp.com',\n        projectId: 'lamentis-584565',\n        storageBucket: 'lamentis-584565.firebasestorage.app',\n        messagingSenderId: '730338121574',\n        appId: '1:730338121574:web:49eed75009652a5a811aa7',\n    },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}